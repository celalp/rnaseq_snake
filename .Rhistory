ggplot(data = vol_data,aes(x=logFC, y=-1*log10(adjP))) + geom_point()
ggplot(data = vol_data,aes(x=logFC, y=-1*log10(adjP))) + geom_point()
ggplot(data = vol_data,aes(x=logFC, y=-1*log10(adjP))) + geom_point()
ggplot(data = vol_data,aes(x=logFC, y=-1*log10(adjP))) + geom_point()
ggplot(data = vol_data,aes(x=logFC, y=-1*log10(adjP))) + geom_point()
#Plot it again!
ggplot(data = vol_data,aes(x=logFC, y=-1*log10(adjP), color = sig)) + geom_point()
p
p
p
p
p
p
p
p
p
ggplot(data = vol_data,aes(x=logFC, y=-1*log10(adjP))) + geom_point()
p
p
a = 1
b = 2
x = 3
c <- a + b
c
c <- a + x
c
x = 4
c <- a + x
c
x = 10
?list()
version
p <- 2
x <- c(1, -3, 5, -6, 8)
sum((x^p[x>0]))
p <- 2
x <- c(1, -3, 5, -6, 8)
sum((x^p[x>0]))
x[x>0]
x <- x[x>0]
sum((x^p))
p <- 2
x <- c(1, -3, 5, -6, 8)
x <- x[x>0]#x = (1 5 8)
sum((x^p))
p <- 2
x <- c(1, -3, 5, -6, 8)
x <- x[x>0]#x = (1 5 8)
x
sum((x^p))
x>0
[x>0]
lm <- function(x,p){
numerator <- sum((x^p)[x>0])
denominator <- sum((x^(p-1))[x>0])
z <- numerator/denominator
return(z)
}
lm(c(1, -3, 5, -6, 8), 2)
p <- 2
x <- c(1, -3, 5, -6, 8)
sum((x^p)[x>0])
(x^p)[x>0]
x^p
[x>0]
p <- 2
x <- c(1, -3, 5, -6, 8)
x <- x[x>0]#x = (1 5 8)
x
sum((x^p))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(BiomaRt)
library(biomaRt)
install.packages('XML')
library(biomaRt)
install.packages("installr")
library(installr)
updateR()
install.packages('XML')
library(biomaRt)
BiocManager::install("biomaRt")
install.packages("BiocManager")
BiocManager::install("biomaRt")
remove.packages("BiocVersion")
BiocManager::install("biomaRt")
library(biomaRt)
?rep
# Join the variables to create a data frame
df <- data.frame(a,b,c,d)
a <- c(10,20,30,40)
b <- c('book', 'pen', 'textbook', 'pencil_case')
c <- c(TRUE,FALSE,TRUE,FALSE)
d <- c(2.5, 8, 10, 7)
# Join the variables to create a data frame
df <- data.frame(a,b,c,d)
View(df)
?data.frame
sale <- c(10,20,30,40)
item <- c('book', 'pen', 'textbook', 'pencil_case')
price <- c(2.5, 8, 10, 7)
# Join the variables to create a data frame
df <- data.frame(sale,item,price)
View(df)
is.na(df)
price <- c(2.5, 8, NA, 7)
# Join the variables to create a data frame
df <- data.frame(sale,item,price)
is.na(df)
sum(is.na(df))
which(is.na(df))
install.packages("tibble")
library(FRASER)
fds <- createTestFraserSettings()
fds <- countRNAData(fds)
Sys.setenv(LANG="en")
fds
fds <- calculatePSIValues(fds)
# filtering junction with low expression
fds <- filterExpressionAndVariability(fds, minExpressionInOneSample=20,minDeltaPsi=0.0, filter=TRUE)
# use PCA to speed up the tutorial
fds <- FRASER(fds, q=2, implementation="PCA")
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
require(org.Hs.eg.db)
orgDb <- org.Hs.eg.db
fds <- annotateRangesWithTxDb(fds, txdb=txdb, orgDb=orgDb)
# we provide two ways to anntoate introns with the corresponding gene symbols:
# the first way uses TxDb-objects provided by the user as shown here
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
# alternatively, we also provide a way to use biomart for the annotation:
fds <- annotateRanges(fds)
# get results: we recommend to use an FDR cutoff 0.05, but due to the small
# dataset size we extract all events and their associated values
# eg: res <- results(fds, zScoreCutoff=NA, padjCutoff=0.05, deltaPsiCutoff=0.3)
res <- results(fds, zScoreCutoff=NA, padjCutoff=NA, deltaPsiCutoff=NA)
res
# result visualization
plotVolcano(fds, sampleID="sample1", type="psi5", aggregate=TRUE)
?Sys.setenv
##############################################
sampleTable <- fread(system.file("extdata", "sampleTable.tsv", package="FRASER", mustWork=TRUE))
View(sampleTable)
library(Vennerable)
library(dplyr)
library(DT)
library(gprofiler2)
library(crosstalk)
get_logfc<-function(df,logfc_cutoff=1){
#return a dataframe with abs(logfc)>1
tt <- df[df$sig, ]#get the sig gene row
tt <- na.omit(tt)#remove all the na row
tt <-tt[abs(tt$log2FoldChange) > logfc_cutoff,]
return(tt)
}
regulation<-function(df, fccol, sigcol){
fc <- df[[fccol]]
issig <- df[[sigcol]]
regs <- rep(NA, nrow(df))
regs[fc > 0 & issig] <- 'up'
regs[fc < 0 & issig] <- 'down'
return(regs)
}
mtm1_35 <- read.table("mtm1_35_de.txt", header = T, stringsAsFactors = F)
mtm1_35$regulation<-regulation(mtm1_35, fccol="log2FoldChange", sigcol="sig")
mtm1_35<-na.omit(mtm1_35)
smyd1 <- read.table("smyd1_de.txt", header = T, stringsAsFactors = F)
smyd1$regulation<-regulation(smyd1, fccol="log2FoldChange", sigcol="sig")
smyd1<-na.omit(smyd1)
pgc1a <- read.table("pgc1a_de.txt", header = T, stringsAsFactors = F)
pgc1a$regulation<-regulation(pgc1a, fccol="log2FoldChange", sigcol="sig")
pgc1a<-na.omit(pgc1a)
genes<-c(Gm14316 4933416O17Rik Duoxa2 D830025C05Rik Dbpht2 Gucy2f Rasgrf2 LOC100043677 Ntsr2 Pld5 Pla2g4d Ciita Gpr173 Pomc Gm6270 Gm3251 LOC100046794 LOC100039128 Gm5134 Slitrk2 Slc30a3 Krt13 LOC100048880 LOC100045650 1700029J11Rik Kng2 Tsnaxip1 Cyp3a11 Tspan2 Tgtp1 LOC100047593 Scn2a1 4930583I09Rik D930007P13Rik Vmn2r123 Adh1 Cldn13 Gm4273 Tceanc Olfr636-ps1 Adcyap1 Il17b LOC100047731 Scn3a Gm6103 Olfr424)
genes<- strsplit('Gm14316 4933416O17Rik Duoxa2 D830025C05Rik Dbpht2 Gucy2f Rasgrf2 LOC100043677 Ntsr2 Pld5 Pla2g4d Ciita Gpr173 Pomc Gm6270 Gm3251 LOC100046794 LOC100039128 Gm5134 Slitrk2 Slc30a3 Krt13 LOC100048880 LOC100045650 1700029J11Rik Kng2 Tsnaxip1 Cyp3a11 Tspan2 Tgtp1 LOC100047593 Scn2a1 4930583I09Rik D930007P13Rik Vmn2r123 Adh1 Cldn13 Gm4273 Tceanc Olfr636-ps1 Adcyap1 Il17b LOC100047731 Scn3a Gm6103 Olfr424',' ')
View(genes)
genes
genes<-unlist(genes)
genes
for (gene in genes){
if (gene in smyd1$ext_gene){
print(gene)
}
}
genes[1] in smyd1$ext_gene
genes[1] %in% smyd1$ext_gene
for (gene in genes){
if (gene %in% smyd1$ext_gene){
print(gene)
}
}
for (gene in genes){
if (gene %in% mtm1_35$ext_gene){
print(gene)
}
}
smyd1 <- read.table("smyd1_de.txt", header = T, stringsAsFactors = F)
smyd1$regulation<-regulation(smyd1, fccol="log2FoldChange", sigcol="sig")
for (gene in genes){
if (gene %in% smyd1$ext_gene){
print(gene)
}
}
smyd1[smyd1$ext_gene=="Cldn13"]
smyd1[smyd1$ext_gene=="Cldn13",]
smyd1[smyd1$ext_gene=="Cldn13",'sig']
for (gene in genes){
if (gene %in% smyd1$ext_gene){
print(gene)
print(smyd1[smyd1$ext_gene==gene,'padj'])
}
##############################################
for (gene in genes){
if (gene %in% smyd1$ext_gene){
print(gene)
print(smyd1[smyd1$ext_gene==gene,'padj'])
}
}
for (gene in genes){
if (gene %in% smyd1$ext_gene){
print(gene)
print(smyd1[smyd1$ext_gene==gene,'padj'])
}
}
for (gene in genes){
if (gene %in% mtm1_35$ext_gene){
print(gene)
print(mtm1_35[mtm1_35$ext_gene==gene,])
}
}
cwd
genes
genes<- unlist(strsplit('Gm14316 4933416O17Rik Duoxa2 D830025C05Rik Dbpht2 Gucy2f Rasgrf2 LOC100043677 Ntsr2 Pld5 Pla2g4d Ciita Gpr173 Pomc Gm6270 Gm3251 LOC100046794 LOC100039128 Gm5134 Slitrk2 Slc30a3 Krt13 LOC100048880 LOC100045650 1700029J11Rik Kng2 Tsnaxip1 Cyp3a11 Tspan2 Tgtp1 LOC100047593 Scn2a1 4930583I09Rik D930007P13Rik Vmn2r123 Adh1 Cldn13 Gm4273 Tceanc Olfr636-ps1 Adcyap1 Il17b LOC100047731 Scn3a Gm6103 Olfr424',' '))
for (gene in genes){
if (gene %in% mtm1_35$ext_gene){
print(gene)
}
}
mtm1_35 <- read.table("mtm1_35_de.txt", header = T, stringsAsFactors = F)
mtm1_35$regulation<-regulation(mtm1_35, fccol="log2FoldChange", sigcol="sig")
mtm1_35<-na.omit(mtm1_35)#keep all the sig genes
smyd1 <- read.table("smyd1_de.txt", header = T, stringsAsFactors = F)
smyd1$regulation<-regulation(smyd1, fccol="log2FoldChange", sigcol="sig")
smyd1<-na.omit(smyd1)
pgc1a <- read.table("pgc1a_de.txt", header = T, stringsAsFactors = F)
pgc1a$regulation<-regulation(pgc1a, fccol="log2FoldChange", sigcol="sig")
pgc1a<-na.omit(pgc1a)
olaps_35<-Venn(list(`35`=na.omit(mtm1_35$ext_gene[mtm1_35$sig]),
`smyd1`=na.omit(smyd1$ext_gene[smyd1$sig]),
`pgc1a`=na.omit(pgc1a$ext_gene[pgc1a$sig]))
)
plot(olaps_35, show=list(Faces=F), doWeights=F)
print(olaps_35@IntersectionSets[[8]], quote = FALSE)
print(olaps_35@IntersectionSets[[8]])
print(as.string(olaps_35@IntersectionSets[[8]]))
print(as.character(olaps_35@IntersectionSets[[8]]))
print(olaps_35@IntersectionSets[[8]], quote = FALSE)
print(olaps_all_up@IntersectionSets[[8]],quote = FALSE)
olaps_all_up<-Venn(list(`35`=na.omit(mtm1_35$ext_gene[mtm1_35$regulation=='up']),
`smyd1`=na.omit(smyd1$ext_gene[smyd1$regulation=='up']),
`pgc1a`=na.omit(pgc1a$ext_gene[pgc1a$regulation=='up']))
)
plot(olaps_all_up, show=list(Faces=F), doWeights=F)
print(olaps_all_up@IntersectionSets[[8]],quote = FALSE)
print(olaps_35@IntersectionSets[[8]], quote = FALSE)
print(olaps_all_down@IntersectionSets[[8]],quote = FALSE)
olaps_all_down<-Venn(list(`35`=na.omit(mtm1_35$ext_gene[mtm1_35$regulation=='down']),
`smyd1`=na.omit(smyd1$ext_gene[smyd1$regulation=='down']),
`pgc1a`=na.omit(pgc1a$ext_gene[pgc1a$regulation=='down']))
)
plot(olaps_all_down, show=list(Faces=F), doWeights=F)
print(olaps_all_down@IntersectionSets[[8]],quote = FALSE)
olaps_35vsmyd1_down<-Venn(list(`35`=na.omit(mtm1_35$ext_gene[mtm1_35$regulation=="down"]),
`smyd1`=na.omit(smyd1$ext_gene[smyd1$regulation=="down"]))
)
plot(olaps_35vsmyd1_down, show=list(Faces=F), doWeights=F)
print(olaps_35vsmyd1_down@IntersectionSets[[4]],quote = FALSE)
print(olaps_35vsmyd1_up@IntersectionSets[[4]],quote = FALSE)
olaps_35vsmyd1_up<-Venn(list(`35`=na.omit(mtm1_35$ext_gene[mtm1_35$regulation=="up"]),
`smyd1`=na.omit(smyd1$ext_gene[smyd1$regulation=="up"]))
)
plot(olaps_35vsmyd1_up, show=list(Faces=F), doWeights=F)
print(olaps_35vsmyd1_up@IntersectionSets[[4]],quote = FALSE)
remove.packages("FRASER")
remove.packages("SummarizedExperiment")
remove.packages("HDF5Array")
remove.packages("Rsubread")
remove.packages("Rhdf5lib")
remove.packages("Rhtslib")
remove.packages("BSgenome")
remove.packages("VGAM")
remove.packages("rhdf5")
?DESeqDataSetFromMatrix
install.packages("yaml")
install.packages("yaml")
library(yaml)
setwd("D:/WORK/MH_DIG2project/upgrade_pipeline/")
data <- yaml.load_file("de_config.yaml")
View(data)
class(data)
data[['contrast']]
data[['contrast']][1]
names(data[['contrast']])
names(data[['contrast']][1])
data <- yaml.load_file("de_config.yaml")
Sys.setenv(LANG="en")
# Time course analysis (WT)
data <- yaml.load_file("de_config.yaml")
data <- yaml.load_file("de_config.yaml")
?yaml.load
data <- yaml.load("de_config.yaml")
data
data <- yaml.load_file("de_config.yaml")
data <- yaml.load_file("de_config.yaml")
View(data)
data <- yaml.load_file("de_config.yaml")
data[['contrast']]
names(data[['contrast']])
for (comparison in names(data[['contrast']])):
data[['contrast']][[comparison]]
names(data[['contrast']])
for (comparison in names(data[['contrast']])):
data[['contrast']][comparison]
for (comparison in names(data[['contrast']])):
data[['contrast']][comparison]
for (comparison in names(data[['contrast']])):
a <- names(data[['contrast']])
for (comparison in a):
print(comparison)
a <- names(data[['contrast']])
for (comparison in a):
print(comparison)
for (comparison in a){
print(comparison)
}
?results
suppressPackageStartupMessages(library(DESeq2))
?results
data <- yaml.load_file("de_config.yaml")
data <- yaml.load_file("de_config.yaml",merge.precedence=c("override"))
data <- yaml.load_file("de_config.yaml",merge.warning=TRUE)
data <- yaml.load_file("de_config.yaml")
data <- yaml.load_file("de_config.yaml")
data
data <- yaml.load_file("de_config.yaml")
data
a <- data[['contrast']]
for (comparison in a){
print(comparison)
}
data[['contrast']]['day']
str(data[['contrast']])
data[['contrast']]
for (comparison in data[['contrast']]){
print(comparison)
}
names(data[['contrast']])
for (comparison in names(data[['contrast']])){
print(comparison)
}
for (comparison in names(data[['contrast']])){
print(data[['contrast']][comparison])
}
for (comparison in names(data[['contrast']])){
print(comparison)
print(data[['contrast']][comparison])
}
for (comparison in names(data[['contrast']])){
print(comparison)
print(data[['contrast']][comparison][1])
}
data[['contrast']]['day']
data[['contrast']][['day']]
data[['contrast']][['day']][1]
for (comparison in names(data[['contrast']])){
print(comparison)
print(data[['contrast']][[comparison]])
}
for (comparison in names(data[['contrast']])){
print(comparison)
for (rule in data[['contrast']][[comparison]]){
print(rule)
}
}
data <- yaml.load_file("de_config.yaml")
data
for (comparison in names(data[['contrast']])){
print(comparison)
for (rule in data[['contrast']][[comparison]]){
print(rule)
}
}
for (comparison in names(data[['contrast']])){
print(comparison)
#for (rule in data[['contrast']][[comparison]]){
#  print(rule)
#}
}
data[['contrast']][["condition"]]
data[['contrast']][["condition"]][1]
data[['contrast']][["condition"]][2]
for (comparison in names(data[['contrast']])){
print(data[['contrast']][[comparison]])
#for (rule in data[['contrast']][[comparison]]){
#  print(rule)
#}
}
unlist(strsplit(data[['contrast']][['condition']],'-'))
unlist(strsplit(data[['contrast']][['condition']],','))
unlist(strsplit(data[['contrast']][['condition']][1],','))
paste0('condition',unlist(strsplit(data[['contrast']][['condition']][1],',')))
c('condition')+unlist(strsplit(data[['contrast']][['condition']][1]
)
]
c('condition')+unlist(strsplit(data[['contrast']][['condition']][1]))
c('condition')+unlist(strsplit(data[['contrast']][['condition']][1],','))
do.call(paste, c(as.list(unlist(strsplit(data[['contrast']][['condition']][1]))), sep = ""))
unlist(strsplit(data[['contrast']][['condition']][1],','))
con <- unlist(strsplit(data[['contrast']][['condition']][1],','))
con
con<-'condition' + con
con<-c('condition') + con
paste('condition', con)
c('condition',con)
for (comparison in names(data[['contrast']])){
print(c(comparison, unlist(strsplit(data[['contrast']][['condition']][1],','))))
#print(data[['contrast']][[comparison]])
#for (rule in data[['contrast']][[comparison]]){
#  print(rule)
#}
}
for (comparison in names(data[['contrast']])){
print(c(comparison, unlist(strsplit(data[['contrast']][['comparison']][1],','))))
#print(data[['contrast']][[comparison]])
#for (rule in data[['contrast']][[comparison]]){
#  print(rule)
#}
}
for (comparison in names(data[['contrast']])){
print(c(comparison, unlist(strsplit(data[['contrast']][[comparison]][1],','))))
#print(data[['contrast']][[comparison]])
#for (rule in data[['contrast']][[comparison]]){
#  print(rule)
#}
}
for (comparison in names(data[['contrast']])){
out <- c(comparison, unlist(strsplit(data[['contrast']][[comparison]][1],',')))
print(out)
#print(data[['contrast']][[comparison]])
#for (rule in data[['contrast']][[comparison]]){
#  print(rule)
#}
}
tar<-c("condition", "KO_35", "WT_15")
tar==out
out
tar<-c("day", "14", "35")
tar==out
defaults=list(rsem=list(abundance="TPM", lengthCol = "length"))
defaults
